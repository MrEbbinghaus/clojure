# Add
(+ 1 2)
==>
Program(List(Symbol,Number,Number))

# Literals
() {} [] #{} #"\d"
==>
Program(List, Map, Vector, Set, RegExp)

# Symbols
'hello +world _what $test' what? test* test::+
==>
Program(Symbol,Symbol,Symbol,Symbol,Symbol,Symbol,Symbol)

# Keywords
:hi :hi/ho ::ho :*+!-_? :abc:def:ghi
==>
Program(Keyword,Keyword,Keyword,Keyword,Keyword)

# Boolean
true false
==>
Program(Boolean,Boolean)

# Nil
nil
==>
Program(Nil)

# Line comments
;; comment
;; another comment
==>
Program(LineComment, LineComment)

# Ignore next form
:hello #_ :ignored
==>
Program(Keyword, Ignored(IgnoreNext,Keyword))

# Ignore next two forms
#_#_ :ignored also-ignored "not-ignored"
==>
Program(Ignored(IgnoreNext,Ignored(IgnoreNext,Keyword), Symbol), String)


# Deref
@hello
==>
Program(Deref,Symbol)

# Destructuring
(let [{:keys [hello]} world]
  world)
==>
Program(List(Symbol,Vector(Map(Keyword, Vector(Symbol)), Symbol) Symbol))
