# Add
(+ 1 2)
==>
Program(List(Symbol,Number,Number))

# Numbers
42 +42 -42
==>
Program(Number,Number,Number)

# Number BigInt
42N +42N -42N 0 0N
==>
Program(Number,Number,Number,Number,Number)

# Number Leading Zero
042 +042 -042
==>
Program(Number,Number,Number)

# Number BigInt
9223372036854775808 -9223372036854775808 10000000000000000000000000000000000000000000000000 -10000000000000000000000000000000000000000000000000
==>
Program(Number,Number,Number,Number)

# Number Exponentials
0x42e +0x42e -0x42e
==>
Program(Number,Number,Number)

# Number Floating
42.23 +42.23 -42.23
==>
Program(Number,Number,Number)

# Number Floating
42.23 +42.23 -42.23
==>
Program(Number,Number,Number)

# Number BigDecimal
42.23M +42.23M -42.23M
==>
Program(Number,Number,Number)

# Number BigDecimal 2
1.0M +1.0M -1.0M +0.0M +0.M 0M -0.0M -0.M
==>
Program(Number,Number,Number,Number,Number,Number,Number,Number)

# Number Floating e
42.2e3 +42.2e+3 -42.2e-3
==>
Program(Number,Number,Number)

# Number Floating e3M
42.2e3M +42.2e+3M -42.2e-3M
==>
Program(Number,Number,Number)

# Number Double
+1.0e+1 +1.e+1 +1e+1 +1.0e1 +1.e1 +1e1
==>
Program(Number,Number,Number,Number,Number,Number)

# Number Double 2
+1.0e-1 +1.e-1 +1e-1 -1.0e1 -1.e1 -1e1 -1.0e-1 -1.e-1 -1e-1
==>
Program(Number,Number,Number,Number,Number,Number,Number,Number,Number)

# Number Double 3
+1.0 +1. 1.0 1. +0.0 0.0 -0.0 +0. -0. -1.0 -1.
==>
Program(Number,Number,Number,Number,Number,Number,Number,Number,Number,Number,Number)

# Number Ratio
4/2 +4/2 -4/2
==>
Program(Number,Number,Number)

# Literals
() {} [] #{} #"\d"
==>
Program(List, Map, Vector, Set, RegExp)

# Symbols
foo foo/bar *+!-_? abc:def:ghi abc.def/ghi abc/def.ghi abc:def/ghi:jkl.mno
==>
Program(Symbol,Symbol,Symbol,Symbol,Symbol,Symbol,Symbol)

# Keywords
:hi :hi/ho ::ho :*+!-_? :abc:def:ghi
==>
Program(Keyword,Keyword,Keyword,Keyword,Keyword)

# Boolean
true false
==>
Program(Boolean,Boolean)

# Nil
nil
==>
Program(Nil)

# Line comments
;; comment
;; another comment
==>
Program(LineComment, LineComment)

# Ignore next form
:hello #_ :ignored
==>
Program(Keyword, Ignored(IgnoreNext,Keyword))

# Ignore next two forms
#_#_ :ignored also-ignored "not-ignored"
==>
Program(Ignored(IgnoreNext,Ignored(IgnoreNext,Keyword), Symbol), String)


# Deref
@hello
==>
Program(Deref,Symbol)

# Destructuring
(let [{:keys [hello]} world]
  world)
==>
Program(List(Symbol,Vector(Map(Keyword, Vector(Symbol)), Symbol) Symbol))
